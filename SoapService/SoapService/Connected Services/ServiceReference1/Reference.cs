//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceReference1
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CalculatorInput", Namespace="http://schemas.datacontract.org/2004/07/SoapService.Models")]
    public partial class CalculatorInput : object
    {
        
        private double Number1Field;
        
        private double Number2Field;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Number1
        {
            get
            {
                return this.Number1Field;
            }
            set
            {
                this.Number1Field = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Number2
        {
            get
            {
                return this.Number2Field;
            }
            set
            {
                this.Number2Field = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CalculatorResult", Namespace="http://schemas.datacontract.org/2004/07/SoapService.Models")]
    public partial class CalculatorResult : object
    {
        
        private double ResultField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Result
        {
            get
            {
                return this.ResultField;
            }
            set
            {
                this.ResultField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.ICalculatorService")]
    public interface ICalculatorService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculatorService/Add", ReplyAction="http://tempuri.org/ICalculatorService/AddResponse")]
        ServiceReference1.CalculatorResult Add(ServiceReference1.CalculatorInput input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculatorService/Add", ReplyAction="http://tempuri.org/ICalculatorService/AddResponse")]
        System.Threading.Tasks.Task<ServiceReference1.CalculatorResult> AddAsync(ServiceReference1.CalculatorInput input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculatorService/Subtract", ReplyAction="http://tempuri.org/ICalculatorService/SubtractResponse")]
        ServiceReference1.CalculatorResult Subtract(ServiceReference1.CalculatorInput input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculatorService/Subtract", ReplyAction="http://tempuri.org/ICalculatorService/SubtractResponse")]
        System.Threading.Tasks.Task<ServiceReference1.CalculatorResult> SubtractAsync(ServiceReference1.CalculatorInput input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculatorService/Multiply", ReplyAction="http://tempuri.org/ICalculatorService/MultiplyResponse")]
        ServiceReference1.CalculatorResult Multiply(ServiceReference1.CalculatorInput input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculatorService/Multiply", ReplyAction="http://tempuri.org/ICalculatorService/MultiplyResponse")]
        System.Threading.Tasks.Task<ServiceReference1.CalculatorResult> MultiplyAsync(ServiceReference1.CalculatorInput input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculatorService/Divide", ReplyAction="http://tempuri.org/ICalculatorService/DivideResponse")]
        ServiceReference1.CalculatorResult Divide(ServiceReference1.CalculatorInput input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculatorService/Divide", ReplyAction="http://tempuri.org/ICalculatorService/DivideResponse")]
        System.Threading.Tasks.Task<ServiceReference1.CalculatorResult> DivideAsync(ServiceReference1.CalculatorInput input);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public interface ICalculatorServiceChannel : ServiceReference1.ICalculatorService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public partial class CalculatorServiceClient : System.ServiceModel.ClientBase<ServiceReference1.ICalculatorService>, ServiceReference1.ICalculatorService
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public CalculatorServiceClient() : 
                base(CalculatorServiceClient.GetDefaultBinding(), CalculatorServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_ICalculatorService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CalculatorServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(CalculatorServiceClient.GetBindingForEndpoint(endpointConfiguration), CalculatorServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CalculatorServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(CalculatorServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CalculatorServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(CalculatorServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CalculatorServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public ServiceReference1.CalculatorResult Add(ServiceReference1.CalculatorInput input)
        {
            return base.Channel.Add(input);
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.CalculatorResult> AddAsync(ServiceReference1.CalculatorInput input)
        {
            return base.Channel.AddAsync(input);
        }
        
        public ServiceReference1.CalculatorResult Subtract(ServiceReference1.CalculatorInput input)
        {
            return base.Channel.Subtract(input);
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.CalculatorResult> SubtractAsync(ServiceReference1.CalculatorInput input)
        {
            return base.Channel.SubtractAsync(input);
        }
        
        public ServiceReference1.CalculatorResult Multiply(ServiceReference1.CalculatorInput input)
        {
            return base.Channel.Multiply(input);
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.CalculatorResult> MultiplyAsync(ServiceReference1.CalculatorInput input)
        {
            return base.Channel.MultiplyAsync(input);
        }
        
        public ServiceReference1.CalculatorResult Divide(ServiceReference1.CalculatorInput input)
        {
            return base.Channel.Divide(input);
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.CalculatorResult> DivideAsync(ServiceReference1.CalculatorInput input)
        {
            return base.Channel.DivideAsync(input);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ICalculatorService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.Transport;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ICalculatorService))
            {
                return new System.ServiceModel.EndpointAddress("https://localhost:7091/CalculatorService.asmx");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return CalculatorServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_ICalculatorService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return CalculatorServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_ICalculatorService);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_ICalculatorService,
        }
    }
}
